---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';
import { getCollection } from 'astro:content';

export interface Props {
	title: string;
	description: string;
	heroImage?: string;
	breadcrumbs?: { label:string; href: string }[];
  activeCategorySlug?: string;
}

const { 
  title, 
  description, 
  heroImage, 
  breadcrumbs, 
  activeCategorySlug = ''
} = Astro.props;

const currentPath = Astro.url.pathname;

const allSplinterlandsPosts = await getCollection('splinterlands');
const allHivePosts = await getCollection('hive');
const allDiscoverStoriesPosts = await getCollection('posts');

const splinterlandsCategories = [...new Set(allSplinterlandsPosts.map(post => post.data.category).filter(Boolean))];
const hiveCategories = [...new Set(allHivePosts.map(post => post.data.category).filter(Boolean))];
const discoverStoriesCategories = [...new Set(allDiscoverStoriesPosts.map(post => post.data.category).filter(Boolean))];
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/images/hived-blogs-favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="article">
		<meta property="og:url" content={Astro.url.href}>
		<meta property="og:title" content={title}>
		<meta property="og:description" content={description}>
		{heroImage && <meta property="og:image" content={new URL(heroImage, Astro.url).href} />}

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url.href}>
		<meta property="twitter:title" content={title}>
		<meta property="twitter:description" content={description}>
		{heroImage && <meta property="twitter:image" content={new URL(heroImage, Astro.url).href} />}

		<script defer src="https://cdn.jsdelivr.net/npm/marked@16.1.2/lib/marked.umd.min.js"></script>
	</head>
	<body>
		<Header splinterlandsCategories={splinterlandsCategories} hiveCategories={hiveCategories} discoverStoriesCategories={discoverStoriesCategories} currentPath={currentPath} activeCategorySlug={activeCategorySlug} />
		{breadcrumbs && <Breadcrumbs segments={breadcrumbs} />}
		
		<slot />

		<script>
			function adjustMainPadding() {
				const header = document.querySelector('header');
				const breadcrumbs = document.querySelector('nav[aria-label="breadcrumb"]');
				const main = document.querySelector('main');

				if (header && main) {
					let totalOffset = header.offsetHeight;
					if (breadcrumbs) {
						totalOffset += breadcrumbs.offsetHeight;
					}
					main.style.paddingTop = `${totalOffset}px`;
				}
			}

			document.addEventListener('DOMContentLoaded', adjustMainPadding);
			window.addEventListener('resize', adjustMainPadding);
		</script>
		<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerButton = document.getElementById('hamburger-button');

    if (!mobileMenu || !hamburgerButton) {
      console.log("Mobile menu or hamburger button not found.");
      return;
    }

    // Ensure menu starts hidden on small screens
    // And remove any stored state from previous sessions
    mobileMenu.classList.add('hidden');
    sessionStorage.removeItem('isMenuOpen');

    // Toggle menu visibility on hamburger button click
    hamburgerButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });

    // Close menu when a menu item is clicked (event delegation on mobileMenu)
    mobileMenu.addEventListener('click', (event) => {
      if (event.target.tagName === 'A') {
        mobileMenu.classList.add('hidden');
      }
    });

    // Optional: Close menu if clicked outside (but not on hamburger button)
    document.addEventListener('click', (event) => {
      if (!mobileMenu.contains(event.target) && !hamburgerButton.contains(event.target)) {
        mobileMenu.classList.add('hidden');
      }
    });
  });
</script>
	</body>
</html>
